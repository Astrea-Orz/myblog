(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{277:function(e,v,a){"use strict";a.r(v);var _=a(4),t=Object(_.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[e._v("#")]),e._v(" 浏览器缓存机制")]),e._v(" "),a("p",[e._v("缓存可以说是性能优化中"),a("strong",[e._v("简单高效")]),e._v("的一种优化方式了，它可以"),a("strong",[e._v("显著减少网络传输所带来的损耗")]),e._v("。")]),e._v(" "),a("p",[e._v("对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。")]),e._v(" "),a("p",[e._v("接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：")]),e._v(" "),a("ul",[a("li",[e._v("缓存位置")]),e._v(" "),a("li",[e._v("缓存策略")]),e._v(" "),a("li",[e._v("实际场景应用缓存策略")])]),e._v(" "),a("h2",{attrs:{id:"缓存位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[e._v("#")]),e._v(" 缓存位置")]),e._v(" "),a("p",[e._v("从缓存位置上来说分为四种，并且各自有"),a("strong",[e._v("优先级")]),e._v("，当依次查找缓存且都没有命中的时候，才会去请求网络")]),e._v(" "),a("ol",[a("li",[e._v("Service Worker")]),e._v(" "),a("li",[e._v("Memory Cache")]),e._v(" "),a("li",[e._v("Disk Cache")]),e._v(" "),a("li",[e._v("Push Cache")]),e._v(" "),a("li",[e._v("网络请求")])]),e._v(" "),a("h3",{attrs:{id:"service-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[e._v("#")]),e._v(" Service Worker")]),e._v(" "),a("p",[e._v("在上一章节中我们已经介绍了 Service Worker 的内容，这里就不演示相关的代码了。")]),e._v(" "),a("p",[e._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且"),a("strong",[e._v("缓存是持续性的")]),e._v("。")]),e._v(" "),a("p",[e._v("当 Service Worker 没有命中缓存的时候，我们需要去调用 "),a("code",[e._v("fetch")]),e._v(" 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。"),a("strong",[e._v("但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[e._v("#")]),e._v(" Memory Cache")]),e._v(" "),a("p",[e._v("Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。"),a("strong",[e._v("但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。")]),e._v(" 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),e._v(" "),a("p",[e._v("当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存")]),e._v(" "),a("p",[e._v("那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？")]),e._v(" "),a("p",[e._v("先说结论，这是不可能的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很玄学了，我查阅了很多资料都没有一个定论。")]),e._v(" "),a("p",[e._v("当然，我通过一些实践和猜测也得出了一些结论：")]),e._v(" "),a("ul",[a("li",[e._v("对于大文件来说，大概率是不存储在内存中的，反之优先")]),e._v(" "),a("li",[e._v("当前系统内存使用率高的话，文件优先存储进硬盘")])]),e._v(" "),a("h3",{attrs:{id:"disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[e._v("#")]),e._v(" Disk Cache")]),e._v(" "),a("p",[e._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache "),a("strong",[e._v("胜在容量和存储时效性上")]),e._v("。")]),e._v(" "),a("p",[e._v("在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。"),a("strong",[e._v("并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。")])]),e._v(" "),a("h3",{attrs:{id:"push-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[e._v("#")]),e._v(" Push Cache")]),e._v(" "),a("p",[e._v("Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。"),a("strong",[e._v("并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。")])]),e._v(" "),a("h3",{attrs:{id:"网络请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[e._v("#")]),e._v(" 网络请求")]),e._v(" "),a("p",[e._v("如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。")]),e._v(" "),a("p",[e._v("那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。")]),e._v(" "),a("h2",{attrs:{id:"缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[e._v("#")]),e._v(" 缓存策略")]),e._v(" "),a("p",[e._v("通常浏览器缓存策略分为两种："),a("strong",[e._v("强缓存")]),e._v("和"),a("strong",[e._v("协商缓存")]),e._v("，并且缓存策略都是通过设置 HTTP Header 来实现的。")]),e._v(" "),a("h3",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),a("p",[e._v("强缓存可以通过设置两种 HTTP Header 实现："),a("code",[e._v("Expires")]),e._v(" 和 "),a("code",[e._v("Cache-Control")]),e._v(" 。强缓存表示在缓存期间不需要请求，state code 为 200。")]),e._v(" "),a("h4",{attrs:{id:"expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Expires:")]),e._v(" Wed, 22 Oct 2018 08:41:00 GMT\n")])])]),a("p",[a("code",[e._v("Expires")]),e._v(" 是 HTTP/1 的产物，表示资源会在 "),a("code",[e._v("Wed, 22 Oct 2018 08:41:00 GMT")]),e._v(" 后过期，需要再次请求。并且 "),a("code",[e._v("Expires")]),e._v(" 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。")]),e._v(" "),a("h4",{attrs:{id:"expires-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires-2"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Cache-control:")]),e._v(" max-age=30\n")])])]),a("p",[a("code",[e._v("Cache-Control")]),e._v(" 出现于 HTTP/1.1，优先级高于 "),a("code",[e._v("Expires")]),e._v(" 。该属性值表示资源会在 30 秒后过期，需要再次请求。")]),e._v(" "),a("p",[a("code",[e._v("Cache-Control")]),e._v(" 可以在请求头或者响应头中设置，并且可以组合使用多种指令")]),e._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),a("p",[e._v("如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。")]),e._v(" "),a("p",[e._v("当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。")]),e._v(" "),a("h4",{attrs:{id:"last-modified-和-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since"}},[e._v("#")]),e._v(" Last-Modified 和 If-Modified-Since")]),e._v(" "),a("p",[a("code",[e._v("Last-Modified")]),e._v(" 表示本地文件最后修改日期，"),a("code",[e._v("If-Modified-Since")]),e._v(" 会将 "),a("code",[e._v("Last-Modified")]),e._v(" 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。")]),e._v(" "),a("p",[e._v("但是 "),a("code",[e._v("Last-Modified")]),e._v(" 存在一些弊端：")]),e._v(" "),a("p",[e._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 "),a("code",[e._v("Last-Modified")]),e._v(" 被修改，服务端不能命中缓存导致发送相同的资源\n因为 "),a("code",[e._v("Last-Modified")]),e._v(" 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\n因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag 。")]),e._v(" "),a("h4",{attrs:{id:"etag-和-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match"}},[e._v("#")]),e._v(" ETag 和 If-None-Match")]),e._v(" "),a("p",[a("code",[e._v("ETag")]),e._v(" 类似于文件指纹，"),a("code",[e._v("If-None-Match")]),e._v(" 会将当前 "),a("code",[e._v("ETag")]),e._v(" 发送给服务器，询问该资源 "),a("code",[e._v("ETag")]),e._v(" 是否变动，有变动的话就将新的资源发送回来。并且 "),a("code",[e._v("ETag")]),e._v(" 优先级比 "),a("code",[e._v("Last-Modified")]),e._v(" 高。")]),e._v(" "),a("p",[e._v("以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。"),a("strong",[e._v("如果什么缓存策略都没设置，那么浏览器会怎么处理？")])]),e._v(" "),a("p",[e._v("对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。")])])}),[],!1,null,null,null);v.default=t.exports}}]);